scale_color_brewer(palette = "Dark2")+
theme(legend.position = 'none')
ggplot(C1, aes(x = Gr, y =  V, color=Gr ))+
geom_boxplot()+
theme_minimal()+
labs(y = 'Sd', x =NULL)+
scale_x_discrete(labels = c('Within condition','Between condition'))+
scale_color_brewer(palette = "Dark2")+
theme(legend.position = 'none')
ggplot(C1, aes(x = Gr, y =  V, color=Gr ))+
geom_boxplot()+
theme_minimal()+
labs(y = 'Sd', x =NULL)+
scale_x_discrete(labels = c('Within condition','Between condition'))+
scale_color_brewer(palette = "Dark2")+
theme(legend.position = 'none')
View(C1)
R  = lm(V ~ Gr, data = C1)
print_html(parameters(R))
print_html(parameters(R))
ggplot(Es, aes(x = Gr, y = Mean, color = Gr))+
geom_errorbar(aes(ymin = Mean-SE, ymax = Mean+SE ), width =0.4)+
geom_point(size = 4)+
theme_minimal()+
labs(y = 'Estimated Sd', x = NULL)+
theme(legend.position = 'none')+
scale_x_discrete(labels=c('Within','Between'))+
scale_color_brewer(palette = "Dark2")+
theme(legend.position = 'none')
ggplot(Es, aes(x = Gr, y = Mean, color = Gr))+
geom_errorbar(aes(ymin = Mean-SE, ymax = Mean+SE ), width =0.4)+
geom_point(size = 4)+
theme_minimal()+
labs(y = 'Estimated Sd', x = NULL)+
theme(legend.position = 'none')+
scale_x_discrete(labels=c('Within','Between'))+
scale_color_brewer(palette = "Dark2")+
theme(legend.position = 'none')
Es = estimate_means(R)
ggplot(Es, aes(x = Gr, y = Mean, color = Gr))+
geom_errorbar(aes(ymin = Mean-SE, ymax = Mean+SE ), width =0.4)+
geom_point(size = 4)+
theme_minimal()+
labs(y = 'Estimated Sd', x = NULL)+
theme(legend.position = 'none')+
scale_x_discrete(labels=c('Within condition','Between condition'))+
scale_color_brewer(palette = "Dark2")+
theme(legend.position = 'none')
ggplot(Es, aes(x = Gr, y = Mean, color = Gr))+
geom_errorbar(aes(ymin = Mean-SE, ymax = Mean+SE ), width =0.4)+
geom_point(size = 4)+
theme_minimal()+
labs(y = 'Estimated Sd', x = NULL)+
theme(legend.position = 'none')+
scale_x_discrete(labels=c('Within condition','Between condition'))+
scale_color_brewer(palette = "Dark2")+
theme(legend.position = 'none')
ggplot(C1, aes(x = Gr, y =  V, color=Gr ))+
geom_violin()+
theme_minimal()+
labs(y = 'Sd', x =NULL)+
scale_x_discrete(labels = c('Within condition','Between condition'))+
scale_color_brewer(palette = "Dark2")+
theme(legend.position = 'none')
ggplot(C1, aes(x = Gr, y =  V, color=Gr ))+
geom_violin()+
theme_minimal()+
labs(y = 'Sd', x =NULL)+
scale_x_discrete(labels = c('Within condition','Between condition'))+
scale_color_brewer(palette = "Dark2")+
theme(legend.position = 'none')
ggplot(C1, aes(x = Gr, y =  V, color=Gr ))+
geom_boxplot()+
theme_minimal()+
labs(y = 'Sd', x =NULL)+
scale_x_discrete(labels = c('Within condition','Between condition'))+
scale_color_brewer(palette = "Dark2")+
theme(legend.position = 'none')
# Load required libraries
library(ggplot2)
library(dplyr)
# Create a sequence of numbers from 0 to 5
x <- seq(0, 5, by = 0.01)
# Create a data frame
df <- data.frame(x = x)
# Add a normal distribution column
df <- df %>%
mutate(y = dnorm(x, mean = mean(x), sd = sd(x)))
# Plot the normal distribution
ggplot(df, aes(x = x, y = y)) +
geom_line() +
theme_minimal() +
labs(x = "Variable", y = "Density", title = "Normal Distribution")
dnorm(0, mean = 0, sd = 1)
dnorm(100, mean = 0, sd = 1)
help(dno)
help("dnorm")
dnorm(n=100, mean = 0, sd = 1)
rnorm(n=100, mean = 0, sd = 1)
x
library(ggplot2)
library(dplyr)
# Create a sequence of numbers from 0 to 5
x <- seq(0, 5, by = 0.01)
# Create a data frame
df <- data.frame(x = x)
# Define a larger standard deviation
sd_large <- 1.5
# Add a normal distribution column with a larger standard deviation
df <- df %>%
mutate(y = dnorm(x, mean = mean(x), sd = sd_large))
# Plot the normal distribution
ggplot(df, aes(x = x, y = y)) +
geom_line() +
theme_minimal() +
labs(x = "Variable", y = "Density", title = "Normal Distribution")
# Load required libraries
library(ggplot2)
library(dplyr)
# Create a sequence of numbers from 0 to 5
x <- seq(0, 5, by = 0.01)
# Create a data frame
df <- data.frame(x = x)
# Define a larger standard deviation
sd_large <- 1.5
# Add a normal distribution column with a larger standard deviation
df <- df %>%
mutate(y = dnorm(x, mean = mean(x), sd = sd_large))
# Plot the normal distribution
ggplot(df, aes(x = x, y = y)) +
geom_line() +
theme_minimal() +
# Plot the normal distribution
ggplot(df, aes(x = x, y = y)) +
geom_line() +
theme_minimal() +
labs(title = "Normal distribution with a larger standard deviation")
# Plot the normal distribution
ggplot(df, aes(x = x, y = y)) +
geom_line() +
theme_minimal() +
labs(title = "Normal distribution with a larger standard deviation")
# Define a larger standard deviation
sd_large <- 3
# Add a normal distribution column with a larger standard deviation
df <- df %>%
mutate(y = dnorm(x, mean = mean(x), sd = sd_large))
# Plot the normal distribution
ggplot(df, aes(x = x, y = y)) +
geom_line() +
theme_minimal() +
labs(title = "Normal distribution with a larger standard deviation")
# Define a larger standard deviation
sd_large <- 0.1
# Add a normal distribution column with a larger standard deviation
df <- df %>%
mutate(y = dnorm(x, mean = mean(x), sd = sd_large))
# Plot the normal distribution
ggplot(df, aes(x = x, y = y)) +
geom_line() +
theme_minimal() +
labs(title = "Normal distribution with a larger standard deviation")
# Define a larger standard deviation
sd_large <- 0.5
# Add a normal distribution column with a larger standard deviation
df <- df %>%
mutate(y = dnorm(x, mean = mean(x), sd = sd_large))
# Plot the normal distribution
ggplot(df, aes(x = x, y = y)) +
geom_line() +
theme_minimal() +
labs(title = "Normal distribution with a larger standard deviation")
# Define a larger standard deviation
sd_large <- 0.8
# Add a normal distribution column with a larger standard deviation
df <- df %>%
mutate(y = dnorm(x, mean = mean(x), sd = sd_large))
# Plot the normal distribution
ggplot(df, aes(x = x, y = y)) +
geom_line() +
theme_minimal() +
labs(title = "Normal distribution with a larger standard deviation")
# Create a sequence of numbers from 0 to 5
x <- seq(1, 5, by = 0.01)
# Create a data frame
df <- data.frame(x = x)
# Define a larger standard deviation
sd_large <- 0.8
# Add a normal distribution column with a larger standard deviation
df <- df %>%
mutate(y = dnorm(x, mean = mean(x), sd = sd_large))
# Plot the normal distribution
ggplot(df, aes(x = x, y = y)) +
geom_line() +
theme_minimal() +
labs(title = "Normal distribution with a larger standard deviation")
# Define a larger standard deviation
sd_large <- 0.5
# Add a normal distribution column with a larger standard deviation
df <- df %>%
mutate(y = dnorm(x, mean = mean(x), sd = sd_large))
# Plot the normal distribution
ggplot(df, aes(x = x, y = y)) +
geom_line() +
theme_minimal() +
labs(title = "Normal distribution with a larger standard deviation")
# Plot the normal distribution
ggplot(df, aes(x = x, y = y)) +
geom_line() +
theme_VOID() +
labs(title = "Normal distribution with a larger standard deviation")
# Plot the normal distribution
ggplot(df, aes(x = x, y = y)) +
geom_line() +
theme_void() +
labs(title = "Normal distribution with a larger standard deviation")
# Plot the normal distribution
ggplot(df, aes(x = x, y = y)) +
geom_line() +
theme_void()
# Plot the normal distribution
ggplot(df, aes(x = x, y = y)) +
geom_line() +
theme_classic()
# Plot the normal distribution
ggplot(df, aes(x = x, y = y)) +
geom_line() +
theme_classic()
MeansC3%>%filter(trialN ==10.00, trial=40)%>%
ggplot( aes(x = Probability, y = Mean, color = Channels))+
geom_line(linewidth = 2,color = '#f8766d')+
geom_ribbon(aes(ymin = CI_low, ymax = CI_high, fill=  Channels),alpha = 0.16, fill = '#f8766d',color = 'transparent')+
ylim(0.10, 0.65)+
facet_wrap(~trialN, nrow =  1)+
labs(y = "Estimated log10(Mu power)") + # Add y-axis label
scale_x_continuous(breaks = c(0,25,50,75,100),labels = c('0%','25%','50%','75%','100%'))+
theme_bw(base_size  = 20)+
theme(axis.title.x=element_blank(),
legend.position = "none")
# Library for data manipulation
library(tidyverse)
# Libraries to do multilevel modelling
library(lme4)
library(lmerTest)
# Extract variables from model
library(easystats)
library(car)
library(brms)
# Read the model
mod = readRDS('C:\\Users\\tomma\\Desktop\\BabyBrain\\Projects\\EEG_probabilities_infants\\Analysis\\NewTest\\model.rds')
# Create an empty data frame
empty_data <- data.frame(x = numeric(0), y = numeric(0))
# Plot with only y-axis label with increased size
Ylabe = ggplot(empty_data, aes(x = x, y = y)) +
geom_blank() + # Adds nothing to the plot but ggplot needs data to define a plot
labs(y = "Estimated log10(Mu power)") + # Add y-axis label
theme(
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
panel.background = element_blank(),
panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.background = element_blank(),
axis.title.y = element_text(size = 20) # Increase the size of the y-axis label
)
MeansC3 = estimate_means(mod,at = c('Probability=c(0,25,50,75,100)','Channels="C3"','trialN = c(10,24,40,54)'),ci = 0.89)
MeansC4 = estimate_means(mod,at = c('Probability=c(0,25,50,75,100)','Channels="C4"','trialN = c(10,24,40,54)'),ci = 0.89)
MeansCz = estimate_means(mod,at = c('Probability=c(0,25,50,75,100)','Channels="Cz"','trialN = c(10,24,40,54)'),ci = 0.89)
labelS = c( `10` = 'Time (trial) 10',
`24` = 'Time (trial) 24',
`40` = 'Time (trial) 40',
`54` = 'Time (trial) 54')
Ast = data_frame(Sign = c('*','*','',''),
trialN = c(10,24,40,54))
P3 = ggplot(MeansC3, aes(x = Probability, y = Mean, color = Channels))+
geom_line(linewidth = 2,color = '#f8766d')+
geom_ribbon(aes(ymin = CI_low, ymax = CI_high, fill=  Channels),alpha = 0.16, fill = '#f8766d',color = 'transparent')+
geom_text(inherit.aes = F, data = Ast,aes(label = Sign, x = 50, y =0.6), size = 12, color = "black", fontface='bold')+
facet_wrap(~trialN, nrow =  1,
labeller = labeller(trialN = labelS))+
ylim(0.10, 0.65)+
labs(y = '')+
scale_x_continuous(breaks = c(0,25,50,75,100))+
theme_bw(base_size  = 18)+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
legend.position = "none")
P3
MeansC3%>%filter(trialN ==10.00, trial=40)%>%
ggplot( aes(x = Probability, y = Mean, color = Channels))+
geom_line(linewidth = 2,color = '#f8766d')+
geom_ribbon(aes(ymin = CI_low, ymax = CI_high, fill=  Channels),alpha = 0.16, fill = '#f8766d',color = 'transparent')+
ylim(0.10, 0.65)+
facet_wrap(~trialN, nrow =  1)+
labs(y = "Estimated log10(Mu power)") + # Add y-axis label
scale_x_continuous(breaks = c(0,25,50,75,100),labels = c('0%','25%','50%','75%','100%'))+
theme_bw(base_size  = 20)+
theme(axis.title.x=element_blank(),
legend.position = "none")
MeansC3%>%filter(trialN ==10.00, trial==40)%>%
ggplot( aes(x = Probability, y = Mean, color = Channels))+
geom_line(linewidth = 2,color = '#f8766d')+
geom_ribbon(aes(ymin = CI_low, ymax = CI_high, fill=  Channels),alpha = 0.16, fill = '#f8766d',color = 'transparent')+
ylim(0.10, 0.65)+
facet_wrap(~trialN, nrow =  1)+
labs(y = "Estimated log10(Mu power)") + # Add y-axis label
scale_x_continuous(breaks = c(0,25,50,75,100),labels = c('0%','25%','50%','75%','100%'))+
theme_bw(base_size  = 20)+
theme(axis.title.x=element_blank(),
legend.position = "none")
MeansC3%>%filter(trialN ==10.00, trialN==40)%>%
ggplot( aes(x = Probability, y = Mean, color = Channels))+
geom_line(linewidth = 2,color = '#f8766d')+
geom_ribbon(aes(ymin = CI_low, ymax = CI_high, fill=  Channels),alpha = 0.16, fill = '#f8766d',color = 'transparent')+
ylim(0.10, 0.65)+
facet_wrap(~trialN, nrow =  1)+
labs(y = "Estimated log10(Mu power)") + # Add y-axis label
scale_x_continuous(breaks = c(0,25,50,75,100),labels = c('0%','25%','50%','75%','100%'))+
theme_bw(base_size  = 20)+
theme(axis.title.x=element_blank(),
legend.position = "none")
MeansC3%>%filter(trialN ==10.00 | trialN==40)%>%
ggplot( aes(x = Probability, y = Mean, color = Channels))+
geom_line(linewidth = 2,color = '#f8766d')+
geom_ribbon(aes(ymin = CI_low, ymax = CI_high, fill=  Channels),alpha = 0.16, fill = '#f8766d',color = 'transparent')+
ylim(0.10, 0.65)+
facet_wrap(~trialN, nrow =  1)+
labs(y = "Estimated log10(Mu power)") + # Add y-axis label
scale_x_continuous(breaks = c(0,25,50,75,100),labels = c('0%','25%','50%','75%','100%'))+
theme_bw(base_size  = 20)+
theme(axis.title.x=element_blank(),
legend.position = "none")
MeansC3%>%filter(trialN ==10.00 | trialN==40)%>%
ggplot( aes(x = Probability, y = Mean, color = Channels))+
geom_line(linewidth = 2,color = '#f8766d')+
geom_ribbon(aes(ymin = CI_low, ymax = CI_high, fill=  Channels),alpha = 0.16, fill = '#f8766d',color = 'transparent')+
ylim(0.10, 0.65)+
facet_wrap(~trialN, nrow =  1)+
labs(y = "Estimated log10(Mu power)") + # Add y-axis label
scale_x_continuous(breaks = c(0,25,50,75,100),labels = c('0%','25%','50%','75%','100%'))+
theme_bw(base_size  = 20)+
theme(axis.title.x=element_blank(),
legend.position = "none")
MeansC3%>%filter(trialN ==10.00 | trialN==40)%>%
ggplot( aes(x = Probability, y = Mean, color = Channels))+
geom_line(linewidth = 2,color = '#f8766d')+
geom_ribbon(aes(ymin = CI_low, ymax = CI_high, fill=  Channels),alpha = 0.16, fill = '#f8766d',color = 'transparent')+
ylim(0.10, 0.65)+
facet_wrap(~trialN, nrow =  1,
labeller = labeller(trialN = labelS))+
labs(y = "Estimated log10(Mu power)") + # Add y-axis label
scale_x_continuous(breaks = c(0,25,50,75,100),labels = c('0%','25%','50%','75%','100%'))+
theme_bw(base_size  = 20)+
theme(axis.title.x=element_blank(),
legend.position = "none")
labelS = c( `10` = 'Trial 10',
`24` = 'Trial 24',
`40` = 'Trial 40',
`54` = 'Trial 54')
MeansC3%>%filter(trialN ==10.00 | trialN==40)%>%
ggplot( aes(x = Probability, y = Mean, color = Channels))+
geom_line(linewidth = 2,color = '#f8766d')+
geom_ribbon(aes(ymin = CI_low, ymax = CI_high, fill=  Channels),alpha = 0.16, fill = '#f8766d',color = 'transparent')+
ylim(0.10, 0.65)+
facet_wrap(~trialN, nrow =  1,
labeller = labeller(trialN = labelS))+
labs(y = "Estimated log10(Mu power)") + # Add y-axis label
scale_x_continuous(breaks = c(0,25,50,75,100),labels = c('0%','25%','50%','75%','100%'))+
theme_bw(base_size  = 20)+
theme(axis.title.x=element_blank(),
legend.position = "none")
ggsave('C:\\Users\\tomma\\Desktop\\p.png', width = 10, height = 10, dpi = 300)
ggsave('C:\\Users\\tomma\\Desktop\\p.png', width = 10, height = 20, dpi = 300)
ggsave('C:\\Users\\tomma\\Desktop\\p.png', width = 20, height = 10, dpi = 300)
MeansC3%>%filter(trialN ==10.00 | trialN==40)%>%
ggplot( aes(x = Probability, y = Mean, color = Channels))+
geom_line(linewidth = 2,color = '#f8766d')+
geom_ribbon(aes(ymin = CI_low, ymax = CI_high, fill=  Channels),alpha = 0.16, fill = '#f8766d',color = 'transparent')+
ylim(0.10, 0.65)+
facet_wrap(~trialN, nrow =  1,
labeller = labeller(trialN = labelS))+
labs(y = "Estimated log10(Mu power)") + # Add y-axis label
scale_x_continuous(breaks = c(0,25,50,75,100),labels = c('0%','25%','50%','75%','100%'))+
theme_bw(base_size  = 20)+
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"),
axis.ticks = element_line(colour = "black"),
panel.border = element_blank(),
strip.background = element_blank()
)+
theme(axis.title.x=element_blank(),
legend.position = "none")
ggsave('C:\\Users\\tomma\\Desktop\\p.png', width = 20, height = 10, dpi = 300)
MeansC3%>%filter(trialN ==10.00 | trialN==40)%>%
ggplot( aes(x = Probability, y = Mean, color = Channels))+
geom_line(linewidth = 2,color = '#f8766d')+
geom_ribbon(aes(ymin = CI_low, ymax = CI_high, fill=  Channels),alpha = 0.16, fill = '#f8766d',color = 'transparent')+
ylim(0.10, 0.65)+
facet_wrap(~trialN, nrow =  1,
labeller = labeller(trialN = labelS))+
labs(y = "Estimated log10(Mu power)") + # Add y-axis label
scale_x_continuous(breaks = c(0,25,50,75,100),labels = c('0%','25%','50%','75%','100%'))+
theme_bw(base_size  = 20)+
theme(
panel.grid.major = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"),
axis.ticks = element_line(colour = "black"),
panel.border = element_blank(),
strip.background = element_blank()
)+
theme(axis.title.x=element_blank(),
legend.position = "none")
ggsave('C:\\Users\\tomma\\Desktop\\p.png', width = 20, height = 10, dpi = 300)
MeansC3%>%filter(trialN ==10.00 | trialN==40)%>%
ggplot( aes(x = Probability, y = Mean, color = Channels))+
geom_line(linewidth = 2,color = '#f8766d')+
geom_ribbon(aes(ymin = CI_low, ymax = CI_high, fill=  Channels),alpha = 0.16, fill = '#f8766d',color = 'transparent')+
ylim(0.10, 0.65)+
facet_wrap(~trialN, nrow =  1,
labeller = labeller(trialN = labelS))+
labs(y = "Estimated log10(Mu power)") + # Add y-axis label
scale_x_continuous(breaks = c(0,25,50,75,100),labels = c('0%','25%','50%','75%','100%'))+
theme_bw(base_size  = 40)+
theme(
panel.grid.major = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"),
axis.ticks = element_line(colour = "black"),
panel.border = element_blank(),
strip.background = element_blank()
)+
theme(axis.title.x=element_blank(),
legend.position = "none")
ggsave('C:\\Users\\tomma\\Desktop\\p.png', width = 20, height = 10, dpi = 300)
ggsave('C:\\Users\\tomma\\Desktop\\p.png', width = 15, height = 10, dpi = 300)
library(tidyverse)
library(easystats)
library(parallel)
library(gt)
library(patchwork)
library(brms)
library(lme4)
library(lmerTest)
library(emmeans)
# Setting and paths -------------------------------------------------------
# Uncomment and set your working directory if needed
# setwd("path/to/your/directory")
setwd("C:\\Users\\tomma\\OneDrive - Birkbeck, University of London\\OriginsAdaptiveBehaviour_2023\\Analysis\\Getting-the-Proper-Grip-A-Longitudinal-Study-of-How-Infants-Learn-to-Adapt-Action-Plans")
# Load data
db  =  read.csv('.\\Data\\PlanningInfants_Session_Data.csv')
# Fix data ---------------------------------------------------------------
db = db[!is.na(db$Grasp_onset), ]
S6 = unique(db[db$ID_id_num ==2 & db$ID_session_num == 6,]$ID_tdate)
S7 = unique(db[db$ID_id_num ==2 & db$ID_session_num == 7,]$ID_tdate)
S8 = unique(db[db$ID_id_num ==2 & db$ID_session_num == 8,]$ID_tdate)
S9 = unique(db[db$ID_id_num ==2 & db$ID_session_num == 9,]$ID_tdate)
db[db$ID_id_num ==2 & db$ID_tdate == S6, ]$ID_session_num = 8
db[db$ID_id_num ==2 & db$ID_tdate == S7, ]$ID_session_num = 7
db[db$ID_id_num ==2 & db$ID_tdate == S8, ]$ID_session_num = 9
db[db$ID_id_num ==2 & db$ID_tdate == S9, ]$ID_session_num = 6
df = db %>%
# Arrange the data by 'ID_id_num' and 'id_session_num'
arrange(ID_id_num, ID_session_num) %>%
# Create new variables or modify existing ones
mutate(
# Convert these columns to factors
ID_id_num = as.factor(ID_id_num),
ID_session_num = as.factor(ID_session_num),
Trial_tool_direction = as.factor(Trial_tool_direction),
Trial_target = as.factor(Trial_target),
Trial_tool = factor(Trial_tool,
levels = c('h', 'b', 'm','s'),
labels = c('Hammer', 'Brush', 'Magnet','Spoon')),
# Calculate age in days at the time of the test
born = dmy(ID_bdate),  # Convert birth date to date format
test = dmy(ID_tdate),  # Convert test date to date format
Age = as.numeric(difftime(test, born, units = "days")),  # Calculate age in days
# Create a new variable 'AdaptiveGrasp' that is 1 if 'Grasp_hand' equals 'Trial_tool_direction', and 0 otherwise
AdaptiveGrasp = case_when(
Grasp_hand == Trial_tool_direction & Grasp_overunder == 'o' ~ 1,
Grasp_hand != Trial_tool_direction & Grasp_overunder == 'u' ~ 1,
Grasp_hand == Trial_tool_direction & Grasp_overunder == 'm' ~ 1,
Grasp_hand == Trial_tool_direction & Grasp_overunder == 'n' ~ 1,
.default = 0)
) %>%
# Group the data by 'ID_id_num'
group_by(ID_id_num) %>%
# Create a new variable 'session' that represents the session number for each subject
mutate(session = match(ID_session_num, unique(ID_session_num))) %>%
ungroup()
df$AgeSt = standardize(df$Age)
db = df %>%  filter( Trial_target != 'e') %>%
mutate(Trial_tool_direction =  factor(Trial_tool_direction, levels = c("l", "r")))
db %>%
group_by(Trial_tool, Trial_tool_direction) %>%
summarise(n())
Priors = prior(normal(0, 4), class = b)
mod = brm(AdaptiveGrasp ~ Trial_tool*AgeSt*Trial_tool_direction +
(1 + AgeSt | ID_id_num),
data = db, family = bernoulli(), prior = Priors,
chains = 4, iter = 8000, warmup = 6000, cores = 4,
control = list(adapt_delta = 0.99, max_treedepth = 15),
file = '.\\Results\\Models\\ToolUse')
prior_summary(mod)
