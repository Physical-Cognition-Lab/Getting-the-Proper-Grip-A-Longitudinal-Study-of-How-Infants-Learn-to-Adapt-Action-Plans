db %>%
group_by(Trial_tool, Trial_tool_direction) %>%
summarise(n())
Priors = prior(normal(0, 4), class = b)
mod = brm(AdaptiveGrasp ~ Trial_tool_direction*Trial_tool*Trial_target*AgeSt + (1 + AgeSt | ID_id_num),
data = db, family = bernoulli(), prior = Priors,
chains = 4, iter = 8000, warmup = 6000, cores = 4,
control = list(adapt_delta = 0.99, max_treedepth = 15),
file = '.\\Results\\Models\\SelfOther')
tool_p = parameters(mod, ci =.89)
tool_p
##################### Effect of non-habitual and habitual #####################
tool_p %>%
mutate(Zero_in_CI = ifelse(CI_low < 0 & CI_high > 0, NA, TRUE))
estimate_contrasts(mod, contrast = 'Trial_tool', by = 'Trial_tool_direction' ,ci = .89)
library(tidyverse)
library(easystats)
library(parallel)
library(gt)
library(patchwork)
library(brms)
library(lme4)
library(lmerTest)
library(emmeans)
# Setting and paths -------------------------------------------------------
# Uncomment and set your working directory if needed
# setwd("path/to/your/directory")
setwd("C:\\Users\\tomma\\OneDrive - Birkbeck, University of London\\OriginsAdaptiveBehaviour_2023\\Analysis\\Getting-the-Proper-Grip-A-Longitudinal-Study-of-How-Infants-Learn-to-Adapt-Action-Plans")
# Load data
db  =  read.csv('.\\Data\\PlanningInfants_Session_Data.csv')
# Fix data ---------------------------------------------------------------
db = db[!is.na(db$Grasp_onset), ]
S6 = unique(db[db$ID_id_num ==2 & db$ID_session_num == 6,]$ID_tdate)
S7 = unique(db[db$ID_id_num ==2 & db$ID_session_num == 7,]$ID_tdate)
S8 = unique(db[db$ID_id_num ==2 & db$ID_session_num == 8,]$ID_tdate)
S9 = unique(db[db$ID_id_num ==2 & db$ID_session_num == 9,]$ID_tdate)
db[db$ID_id_num ==2 & db$ID_tdate == S6, ]$ID_session_num = 8
db[db$ID_id_num ==2 & db$ID_tdate == S7, ]$ID_session_num = 7
db[db$ID_id_num ==2 & db$ID_tdate == S8, ]$ID_session_num = 9
db[db$ID_id_num ==2 & db$ID_tdate == S9, ]$ID_session_num = 6
df = db %>%
# Arrange the data by 'ID_id_num' and 'id_session_num'
arrange(ID_id_num, ID_session_num) %>%
# Create new variables or modify existing ones
mutate(
# Convert these columns to factors
ID_id_num = as.factor(ID_id_num),
ID_session_num = as.factor(ID_session_num),
Trial_tool_direction = as.factor(Trial_tool_direction),
Trial_target = as.factor(Trial_target),
Trial_tool = factor(Trial_tool,
levels = c('h', 'b', 'm','s'),
labels = c('Hammer', 'Brush', 'Magnet','Spoon')),
# Calculate age in days at the time of the test
born = dmy(ID_bdate),  # Convert birth date to date format
test = dmy(ID_tdate),  # Convert test date to date format
Age = as.numeric(difftime(test, born, units = "days")),  # Calculate age in days
# Create a new variable 'AdaptiveGrasp' that is 1 if 'Grasp_hand' equals 'Trial_tool_direction', and 0 otherwise
AdaptiveGrasp = case_when(
Grasp_hand == Trial_tool_direction & Grasp_overunder == 'o' ~ 1,
Grasp_hand != Trial_tool_direction & Grasp_overunder == 'u' ~ 1,
Grasp_hand == Trial_tool_direction & Grasp_overunder == 'm' ~ 1,
Grasp_hand == Trial_tool_direction & Grasp_overunder == 'n' ~ 1,
.default = 0)
) %>%
# Group the data by 'ID_id_num'
group_by(ID_id_num) %>%
# Create a new variable 'session' that represents the session number for each subject
mutate(session = match(ID_session_num, unique(ID_session_num))) %>%
ungroup()
df$AgeSt = standardize(df$Age)
db = df %>%  filter( Trial_target != 'e') %>%
mutate(Trial_tool_direction =  factor(Trial_tool_direction, levels = c("l", "r")))
# Table information ------------------------------------------------------
# Remove file if exist
if (file.exists(".\\Results\\Tables\\ToolDirection.docx")) {
file.remove(".\\Results\\Tables\\ToolDirection.docx")}
df %>%
group_by(ID_id_num, Trial_tool) %>%
summarise(
Left = sum(Trial_tool_direction == 'l'),
Right = sum(Trial_tool_direction == 'r')
) %>%
ungroup() %>%
rename(
Id = ID_id_num,
Tool = Trial_tool
) %>%
pivot_longer(cols = c(Left, Right), names_to = 'Direction', values_to = 'Count') %>%
pivot_wider( names_from = Tool, values_from = Count) %>%
gt(rowname_col = "ID_id_num") %>%
tab_spanner(
label = "Tools",
columns = c(Spoon, Brush, Hammer, Magnet)
) %>%
tab_style(
style = cell_text(align = "center"),
locations = cells_body(columns = everything())) %>%
gtsave(".\\Results\\Tables\\ToolDirection.docx")
# Remove file if exist
if (file.exists(".\\Results\\Tables\\SessionCounter.docx")) {
file.remove(".\\Results\\Tables\\SessionCounter.docx")}
A = df %>%
group_by(ID_id_num) %>%
mutate(AgeWeeks = as.numeric(difftime(test, born, units = "weeks"))) %>%
summarize(
`First session` = round(min(AgeWeeks),1),
`Last session` = round(max(AgeWeeks),1),
`# Session` = n_distinct(AgeWeeks)) %>%
ungroup()
B = df %>%
group_by(ID_id_num, Trial_tool) %>%
summarise(SessionN = n()) %>%
ungroup() %>%
pivot_wider(names_from = Trial_tool, values_from = SessionN )
left_join(A, B, by = 'ID_id_num') %>%
mutate(` ` = '', `  ` = '', `   ` = '', `    ` = '') %>%  # Create an empty column
select(ID_id_num, ` `, `# Session`, `  `, `First session`, `Last session`, `   `, `    `, Spoon, Brush, Hammer, Magnet) %>%  # Manually reorder columns with the spacer
gt() %>%
cols_label(ID_id_num = "Id") %>%  # Renames the rowname column
tab_spanner(
label = "Age (weeks)",
columns = c(`First session`, `Last session`)
) %>%
tab_spanner(
label = "# of trials",
columns = c(Spoon, Brush, Hammer, Magnet)
) %>%
cols_width( ` ` ~ px(20), `  ` ~ px(20), `   ` ~ px(20), `    ` ~ px(20)) %>% # Adjust the width of the empty column (spacer)
tab_style(
style = cell_text(align = "center"),
locations = cells_body(columns = everything())) %>%
gtsave(".\\Results\\Tables\\SessionCounter.docx")
# Model -------------------------------------------------------
db %>%
group_by(Trial_tool, Trial_tool_direction) %>%
summarise(n())
Priors = prior(normal(0, 4), class = b)
mod = brm(AdaptiveGrasp ~ Trial_tool*AgeSt*Trial_tool_direction +
(1 + AgeSt | ID_id_num),
data = db, family = bernoulli(), prior = Priors,
chains = 4, iter = 8000, warmup = 6000, cores = 4,
control = list(adapt_delta = 0.99, max_treedepth = 15),
file = '.\\Results\\Models\\ToolUse')
parameters::parameters(mod, ci=.89)
estimate_contrasts(mod, contrast = 'Trial_tool' , by = 'Trial_tool_direction' ,ci = .89)
library(brms)
library(tidyverse)
library(easystats)
library(patchwork)
library(emmeans)
# Setting and paths -------------------------------------------------------
# Uncomment and set your working directory if needed
# setwd("path/to/your/directory")
setwd("C:\\Users\\tomma\\OneDrive - Birkbeck, University of London\\OriginsAdaptiveBehaviour_2023\\Analysis\\Getting-the-Proper-Grip-A-Longitudinal-Study-of-How-Infants-Learn-to-Adapt-Action-Plans")
# Load data
db  =  read.csv('.\\Data\\PlanningInfants_Session_Data.csv')
# Fix data ---------------------------------------------------------------
db = db[!is.na(db$Grasp_onset), ]
S6 = unique(db[db$ID_id_num ==2 & db$ID_session_num == 6,]$ID_tdate)
S7 = unique(db[db$ID_id_num ==2 & db$ID_session_num == 7,]$ID_tdate)
S8 = unique(db[db$ID_id_num ==2 & db$ID_session_num == 8,]$ID_tdate)
S9 = unique(db[db$ID_id_num ==2 & db$ID_session_num == 9,]$ID_tdate)
db[db$ID_id_num ==2 & db$ID_tdate == S6, ]$ID_session_num = 8
db[db$ID_id_num ==2 & db$ID_tdate == S7, ]$ID_session_num = 7
db[db$ID_id_num ==2 & db$ID_tdate == S8, ]$ID_session_num = 9
db[db$ID_id_num ==2 & db$ID_tdate == S9, ]$ID_session_num = 6
df = db %>%
# Arrange the data by 'ID_id_num' and 'id_session_num'
arrange(ID_id_num, ID_session_num) %>%
# Create new variables or modify existing ones
mutate(
# Convert these columns to factors
ID_id_num = as.factor(ID_id_num),
ID_session_num = as.factor(ID_session_num),
Trial_tool_direction = as.factor(Trial_tool_direction),
Trial_tool = factor(Trial_tool,
levels = c( 'h', 'b', 'm','s'),
labels = c( 'Hammer', 'Brush', 'Magnet','Spoon')),
# Calculate age in days at the time of the test
born = dmy(ID_bdate),  # Convert birth date to date format
test = dmy(ID_tdate),  # Convert test date to date format
Age = as.numeric(difftime(test, born, units = "days")),  # Calculate age in days
# Create a new variable 'AdaptiveGrasp' that is 1 if 'Grasp_hand' equals 'Trial_tool_direction', and 0 otherwise
AdaptiveGrasp = case_when(
Grasp_hand == Trial_tool_direction & Grasp_overunder == 'o' ~ 1,
Grasp_hand != Trial_tool_direction & Grasp_overunder == 'u' ~ 1,
Grasp_hand == Trial_tool_direction & Grasp_overunder == 'm' ~ 1,
Grasp_hand == Trial_tool_direction & Grasp_overunder == 'n' ~ 1,
.default = 0)
)
# Filter only the one that have direction and the spoon adn brush
df = df %>% filter(
Trial_target == 'i' |  Trial_target == 'e',
Trial_tool == 'Brush' | Trial_tool == 'Spoon') %>%
mutate(Trial_target = factor(Trial_target,
levels = c( 'e','i'),
labels = c( 'Other','Self')))
# Standardizagre
df$AgeSt = standardize(df$Age)
db = df %>%
mutate(Trial_tool_direction =  factor(Trial_tool_direction, levels = c("l", "r")))
# Bayesian model ----------------------------------------------------------
db %>%
group_by(Trial_tool, Trial_tool_direction) %>%
summarise(n())
Priors = prior(normal(0, 4), class = b)
mod = brm(AdaptiveGrasp ~ Trial_tool_direction*Trial_tool*Trial_target*AgeSt + (1 + AgeSt | ID_id_num),
data = db, family = bernoulli(), prior = Priors,
chains = 4, iter = 8000, warmup = 6000, cores = 4,
control = list(adapt_delta = 0.99, max_treedepth = 15),
file = '.\\Results\\Models\\SelfOther')
tool_p = parameters(mod, ci =.89)
tool_c = estimate_contrasts(mod, contrast = c('Trial_target','Trial_tool'), ci =.89)
tool_s = estimate_slopes(mod, trend = 'AgeSt', by=c('Trial_target','Trial_tool'),ci = .89)
##################### Effect of non-habitual and habitual #####################
tool_p %>%
mutate(Zero_in_CI = ifelse(CI_low < 0 & CI_high > 0, NA, TRUE))
estimate_contrasts(mod, contrast = 'Trial_tool', by = 'Trial_tool_direction' ,ci = .89)
tool_p
tool_p %>%
mutate(Zero_in_CI = ifelse(CI_low < 0 & CI_high > 0, NA, TRUE))
estimate_contrasts(mod, contrast = 'Trial_tool', by = 'Trial_tool_direction' ,ci = .89)
Est_mod2 = estimate_means(mod, by= c('Trial_tool', 'Trial_tool_direction'), ci =.89)
Est_mod2$Trial_tool_direction = factor(Est_mod2$Trial_tool_direction,
levels = c("l", "r"),
labels = c("Handle-left", "Handle-right"))
custom_colors2 <- c(
"Brush"  = "#35b779",
"Spoon"  = "#440154"
)
MDir2 = Est_mod2 %>%
ggplot(aes(x = Trial_tool_direction, y  = Probability  , color = Trial_tool ))+
geom_point(size = 5, position = position_dodge(width = 0.5))+
geom_errorbar(aes(ymin = CI_low, ymax = CI_high), position = position_dodge(width = 0.5), width =.5, lwd = 1.6)+
theme_bw(base_size = 20)+
labs(x = '', color = 'Tool', y = 'Estimated probability')+
scale_color_manual(values = custom_colors2)
MDir2
estimate_contrasts(mod, contrast = c('Trial_tool','Trial_tool_direction') ,ci = .89)
library(tidyverse)
library(easystats)
library(parallel)
library(gt)
library(patchwork)
library(brms)
library(lme4)
library(lmerTest)
library(emmeans)
# Setting and paths -------------------------------------------------------
# Uncomment and set your working directory if needed
# setwd("path/to/your/directory")
setwd("C:\\Users\\tomma\\OneDrive - Birkbeck, University of London\\OriginsAdaptiveBehaviour_2023\\Analysis\\Getting-the-Proper-Grip-A-Longitudinal-Study-of-How-Infants-Learn-to-Adapt-Action-Plans")
# Load data
db  =  read.csv('.\\Data\\PlanningInfants_Session_Data.csv')
# Fix data ---------------------------------------------------------------
db = db[!is.na(db$Grasp_onset), ]
S6 = unique(db[db$ID_id_num ==2 & db$ID_session_num == 6,]$ID_tdate)
S7 = unique(db[db$ID_id_num ==2 & db$ID_session_num == 7,]$ID_tdate)
S8 = unique(db[db$ID_id_num ==2 & db$ID_session_num == 8,]$ID_tdate)
S9 = unique(db[db$ID_id_num ==2 & db$ID_session_num == 9,]$ID_tdate)
db[db$ID_id_num ==2 & db$ID_tdate == S6, ]$ID_session_num = 8
db[db$ID_id_num ==2 & db$ID_tdate == S7, ]$ID_session_num = 7
db[db$ID_id_num ==2 & db$ID_tdate == S8, ]$ID_session_num = 9
db[db$ID_id_num ==2 & db$ID_tdate == S9, ]$ID_session_num = 6
df = db %>%
# Arrange the data by 'ID_id_num' and 'id_session_num'
arrange(ID_id_num, ID_session_num) %>%
# Create new variables or modify existing ones
mutate(
# Convert these columns to factors
ID_id_num = as.factor(ID_id_num),
ID_session_num = as.factor(ID_session_num),
Trial_tool_direction = as.factor(Trial_tool_direction),
Trial_target = as.factor(Trial_target),
Trial_tool = factor(Trial_tool,
levels = c('h', 'b', 'm','s'),
labels = c('Hammer', 'Brush', 'Magnet','Spoon')),
# Calculate age in days at the time of the test
born = dmy(ID_bdate),  # Convert birth date to date format
test = dmy(ID_tdate),  # Convert test date to date format
Age = as.numeric(difftime(test, born, units = "days")),  # Calculate age in days
# Create a new variable 'AdaptiveGrasp' that is 1 if 'Grasp_hand' equals 'Trial_tool_direction', and 0 otherwise
AdaptiveGrasp = case_when(
Grasp_hand == Trial_tool_direction & Grasp_overunder == 'o' ~ 1,
Grasp_hand != Trial_tool_direction & Grasp_overunder == 'u' ~ 1,
Grasp_hand == Trial_tool_direction & Grasp_overunder == 'm' ~ 1,
Grasp_hand == Trial_tool_direction & Grasp_overunder == 'n' ~ 1,
.default = 0)
) %>%
# Group the data by 'ID_id_num'
group_by(ID_id_num) %>%
# Create a new variable 'session' that represents the session number for each subject
mutate(session = match(ID_session_num, unique(ID_session_num))) %>%
ungroup()
df$AgeSt = standardize(df$Age)
db = df %>%  filter( Trial_target != 'e') %>%
mutate(Trial_tool_direction =  factor(Trial_tool_direction, levels = c("l", "r")))
# Table information ------------------------------------------------------
# Remove file if exist
if (file.exists(".\\Results\\Tables\\ToolDirection.docx")) {
file.remove(".\\Results\\Tables\\ToolDirection.docx")}
df %>%
group_by(ID_id_num, Trial_tool) %>%
summarise(
Left = sum(Trial_tool_direction == 'l'),
Right = sum(Trial_tool_direction == 'r')
) %>%
ungroup() %>%
rename(
Id = ID_id_num,
Tool = Trial_tool
) %>%
pivot_longer(cols = c(Left, Right), names_to = 'Direction', values_to = 'Count') %>%
pivot_wider( names_from = Tool, values_from = Count) %>%
gt(rowname_col = "ID_id_num") %>%
tab_spanner(
label = "Tools",
columns = c(Spoon, Brush, Hammer, Magnet)
) %>%
tab_style(
style = cell_text(align = "center"),
locations = cells_body(columns = everything())) %>%
gtsave(".\\Results\\Tables\\ToolDirection.docx")
# Remove file if exist
if (file.exists(".\\Results\\Tables\\SessionCounter.docx")) {
file.remove(".\\Results\\Tables\\SessionCounter.docx")}
A = df %>%
group_by(ID_id_num) %>%
mutate(AgeWeeks = as.numeric(difftime(test, born, units = "weeks"))) %>%
summarize(
`First session` = round(min(AgeWeeks),1),
`Last session` = round(max(AgeWeeks),1),
`# Session` = n_distinct(AgeWeeks)) %>%
ungroup()
B = df %>%
group_by(ID_id_num, Trial_tool) %>%
summarise(SessionN = n()) %>%
ungroup() %>%
pivot_wider(names_from = Trial_tool, values_from = SessionN )
left_join(A, B, by = 'ID_id_num') %>%
mutate(` ` = '', `  ` = '', `   ` = '', `    ` = '') %>%  # Create an empty column
select(ID_id_num, ` `, `# Session`, `  `, `First session`, `Last session`, `   `, `    `, Spoon, Brush, Hammer, Magnet) %>%  # Manually reorder columns with the spacer
gt() %>%
cols_label(ID_id_num = "Id") %>%  # Renames the rowname column
tab_spanner(
label = "Age (weeks)",
columns = c(`First session`, `Last session`)
) %>%
tab_spanner(
label = "# of trials",
columns = c(Spoon, Brush, Hammer, Magnet)
) %>%
cols_width( ` ` ~ px(20), `  ` ~ px(20), `   ` ~ px(20), `    ` ~ px(20)) %>% # Adjust the width of the empty column (spacer)
tab_style(
style = cell_text(align = "center"),
locations = cells_body(columns = everything())) %>%
gtsave(".\\Results\\Tables\\SessionCounter.docx")
# Model -------------------------------------------------------
db %>%
group_by(Trial_tool, Trial_tool_direction) %>%
summarise(n())
Priors = prior(normal(0, 4), class = b)
mod = brm(AdaptiveGrasp ~ Trial_tool*AgeSt*Trial_tool_direction +
(1 + AgeSt | ID_id_num),
data = db, family = bernoulli(), prior = Priors,
chains = 4, iter = 8000, warmup = 6000, cores = 4,
control = list(adapt_delta = 0.99, max_treedepth = 15),
file = '.\\Results\\Models\\ToolUse')
# Prediction of spoon over age ------------------------------------------------------------
gc()
library(tidybayes)
Age_to_calculate_over = standardize( seq(270, 600, 15), reference = db$Age)
# Create new data
MeansDraws <- expand.grid(AgeSt = Age_to_calculate_over,
Trial_tool = "Spoon",
Trial_tool_direction= c('r','l'),
ID_id_num = NA )
# Add expected posterior draws to the new data
MeansDraws <- MeansDraws %>%
add_epred_draws(object = mod, re_formula = NA, ndraws = 1000)
Pred <-  MeansDraws %>%
group_by(AgeSt) %>%
summarize(
Predicted = mean(.epred),
Se = sd(.epred) / sqrt(n()),
CI_low = tidybayes::qi(.epred, .width = .89)[1,1],
CI_high = tidybayes::qi(.epred, .width = .89)[1,2]
) %>%
mutate(
Age = unstandardize(AgeSt, reference = db$Age),
years = floor(Age / 365.25),
months = floor((Age %% 365.25) / 30.44),
days = floor((Age %% 365.25) %% 30.44),
TotMonths = Age / 30.44
)
# Unstandardize age
MeansDraws$Age = unstandardize(MeansDraws$AgeSt, reference = db$Age )
# Plot distributions for age
Prediction_plot = MeansDraws %>%
ggplot(aes(x = Age, y = .epred)) +
stat_halfeye( aes(fill = after_stat(level)),
width= 15, .width = .89, adjust = 0.6)+
# Add the highlighted rectangle
annotate("rect", xmin = Pred[which(Pred$CI_low >= 0.75)[1],]$Age-5,
xmax = max(Pred$Age)+22,
ymin = 0.752, ymax = .975,
fill = "black", alpha = 0.1) +
geom_hline(yintercept = .5, linetype = 'dashed', lwd=1.2)+
geom_hline(yintercept = .75, linetype = 'dashed', lwd=1.2, color ='darkred')+
theme_bw(base_size = 35)+
theme(legend.position = 'none')+
scale_fill_oi() +  # Set a specific color for the fill
labs(y = 'Estimated probability',
x = "Age(days)")+
coord_cartesian(ylim = c(0.38, 1))+
scale_y_continuous(breaks = seq(0.4, 1, 0.1),
labels = c('0.4','0.5','0.6','0.7','0.8','0.9','Adaptive\nGrasp'))
Prediction_plot
View(MeansDraws)
View(Pred)
## Simulation (add stepwise change) ---------------------------------------------------------
gc()
if (file.exists('.\\Results\\Models\\Simualtion.RDS')){
Df = readRDS('.\\Results\\Models\\Simualtion.RDS')
} else{
# Function to run the simulation
run_simulation <- function(i, xx) {
dbb <- xx
dbb$Simulation <- NA
dbb <- dbb %>%
group_by(ID_id_num, Trial_tool) %>%
mutate(
tresh = sample(unique(AgeSt), 1),
Simulation = if_else(AgeSt < tresh, 0, 1)
) %>%
ungroup()
modLm <- glmer(Simulation ~ Trial_tool*AgeSt*Trial_tool_direction + (1 + AgeSt | ID_id_num),
data = dbb, family = binomial(), control = glmerControl(optimizer = "bobyqa"))
Db = as.data.frame(estimate_slopes(modLm, trend = 'AgeSt', by ='Trial_tool'))
Db$Iter = i
return(Db)
}
# Number of cores to use
num_cores <- detectCores() - 1  # Use one less than the total number of cores
# Set up the cluster
cl <- makeCluster(num_cores)
# Export necessary libraries and objects to each worker
clusterEvalQ(cl, {
library(tidyverse)
library(lme4)
library(lmerTest)
library(easystats)
})
# Export the dataframe to each worker
clusterExport(cl, varlist = c("df"))
# Run the simulations in parallel, passing df to each function call
results <- parLapply(cl, 1:1000, run_simulation, db)
# Stop the cluster
stopCluster(cl)
Df = bind_rows(results)
saveRDS(Df, '.\\Results\\Models\\Simualtion.RDS')
gc()
}
View(Df)
Spoon =  Df %>% filter(Trial_tool == 'Spoon')
SpoonCi = ci(Spoon$Coefficient, ci= .89)
Spoon = as.data.frame(density(Spoon$Coefficient))
Spoon
SpoonCi
Hammer=  Df %>% filter(Trial_tool == 'Hammer')
HammerCi = ci(Hammer$Coefficient, ci= .89)
Hammer = as.data.frame(density(Hammer$Coefficient))
Magnet =  Df %>% filter(Trial_tool == 'Magnet')
MagnetCi = ci(Magnet$Coefficient, ci= .89)
Magnet = as.data.frame(density(Magnet$Coefficient))
Spoon =  Df %>% filter(Trial_tool == 'Spoon')
SpoonCi = ci(Spoon$Coefficient, ci= .89)
Spoon = as.data.frame(density(Spoon$Coefficient))
Brush =  Df %>% filter(Trial_tool == 'Brush')
BrushCi = ci(Brush$Coefficient, ci= .89)
Brush = as.data.frame(density(Brush$Coefficient))
## Posterior draws ---------------------------------------------------------
posterior_effects <- mod %>%
spread_draws( b_AgeSt,
b_Trial_toolBrush,
b_Trial_toolMagnet,
b_Trial_toolSpoon) %>%
mutate(
Hammer = b_AgeSt,
Brush = Hammer + b_Trial_toolBrush,
Magnet = Hammer + b_Trial_toolMagnet,
Spoon = Hammer + b_Trial_toolSpoon
)
HammerP = as.data.frame(density(posterior_effects$Hammer))
HammerPCi = ci(posterior_effects$Hammer, ci= .89)
MagnetP= as.data.frame(density(posterior_effects$Magnet))
MagnetPCi = ci(posterior_effects$Magnet, ci= .89)
SpoonP = as.data.frame(density(posterior_effects$Spoon))
SpoonPCi = ci(posterior_effects$Spoon, ci= .89)
BrushP = as.data.frame(density(posterior_effects$Brush))
BrushPCi = ci(posterior_effects$Brush, ci= .89)
SpoonPCi
SpoonP
SpoonPCi
SpoonCi
BrushPCi
BrushCi
HammerPCi
HammerCi
MagnetPCi
MagnetCi
